package com.jtbdevelopment.e_eye_o.ria.vaadin.components;

import com.google.common.eventbus.EventBus;
import com.jtbdevelopment.e_eye_o.DAO.ReadWriteDAO;
import com.jtbdevelopment.e_eye_o.entities.AppUser;
import com.jtbdevelopment.e_eye_o.entities.IdObjectFactory;
import com.jtbdevelopment.e_eye_o.entities.Student;
import com.jtbdevelopment.e_eye_o.ria.vaadin.events.IdObjectChanged;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.fieldgroup.BeanFieldGroup;
import com.vaadin.data.fieldgroup.FieldGroup;
import com.vaadin.data.validator.BeanValidator;
import com.vaadin.event.Action;
import com.vaadin.event.ShortcutAction;
import com.vaadin.ui.*;
import com.vaadin.ui.themes.Runo;
import org.jsoup.helper.StringUtil;

/**
 * Date: 3/10/13
 * Time: 6:45 PM
 */
public class StudentForm extends CustomComponent implements Action.Handler {
    static final Action esc = new ShortcutAction("Close window",
            ShortcutAction.KeyCode.ESCAPE, null);
    static final Action[] actions = new Action[]{esc};

    private GridLayout mainLayout;

    private final BeanFieldGroup<Student> beanFieldGroup = new BeanFieldGroup<>(Student.class);

    private final ReadWriteDAO readWriteDAO;

    private final IdObjectFactory idObjectFactory;

    private final AppUser appUser;

    private final EventBus eventBus;

    /**
     * The constructor should first build the main layout, set the
     * composition root and then do any custom initialization.
     * <p/>
     * The constructor will not be automatically regenerated by the
     * visual editor.
     */
    public StudentForm(final ReadWriteDAO readWriteDAO, final IdObjectFactory idObjectFactory, final EventBus eventBus, final AppUser appUser, final Student student) {
        this.readWriteDAO = readWriteDAO;
        this.idObjectFactory = idObjectFactory;
        this.appUser = appUser;
        this.eventBus = eventBus;
        buildMainLayout();
        setCompositionRoot(mainLayout);
        if (student != null) {
            beanFieldGroup.setItemDataSource(student);
        } else {
            beanFieldGroup.setItemDataSource(idObjectFactory.newStudent(appUser));
        }
    }

    @AutoGenerated
    private void buildMainLayout() {
        // the main layout and components will be created here
        mainLayout = new GridLayout(8, 4);
        mainLayout.setMargin(true);
        mainLayout.setSpacing(true);
        mainLayout.setImmediate(true);


        mainLayout.addComponent(new Label("First Name"), 0, 0);
        mainLayout.addComponent(new Label("Last Name"), 0, 1);
        mainLayout.addComponent(new Label("Classes"), 2, 0);

        TextField firstName = new TextField();
        beanFieldGroup.bind(firstName, "firstName");
        firstName.addValidator(new BeanValidator(Student.class, "firstName"));
        firstName.setImmediate(true);
        mainLayout.addComponent(firstName, 1, 0);

        final TextField lastName = new TextField();
        beanFieldGroup.bind(lastName, "lastName");
        lastName.addValidator(new BeanValidator(Student.class, "lastName"));
        lastName.setImmediate(true);
        mainLayout.addComponent(lastName, 1, 1);

        final TwinColSelect classes = new TwinColSelect();
        classes.setRows(4);
        mainLayout.addComponent(classes, 3, 0, 5, 3);

        Button save = new Button("Save");
        save.addStyleName(Runo.BUTTON_DEFAULT);
        save.setClickShortcut(ShortcutAction.KeyCode.ENTER);
        mainLayout.addComponent(save, 6, 0);
        save.addClickListener(new Button.ClickListener() {
            @Override
            public void buttonClick(final Button.ClickEvent event) {
                try {
                    beanFieldGroup.commit();
                    Student student = beanFieldGroup.getItemDataSource().getBean();
                    IdObjectChanged.ChangeType changeType;
                    if (StringUtil.isBlank(student.getId())) {
                        student = readWriteDAO.create(beanFieldGroup.getItemDataSource().getBean());
                        changeType = IdObjectChanged.ChangeType.ADDED;
                    } else {
                        student = readWriteDAO.update(beanFieldGroup.getItemDataSource().getBean());
                        changeType = IdObjectChanged.ChangeType.MODIFIED;
                    }
                    eventBus.post(new IdObjectChanged<>(changeType, student));
                    closeWindow();
                } catch (FieldGroup.CommitException e) {
                    throw new RuntimeException(e);
                }
            }
        });
        final Button reset = new Button("Reset");
        mainLayout.addComponent(reset, 6, 1);
        reset.addClickListener(new Button.ClickListener() {
            @Override
            public void buttonClick(final Button.ClickEvent event) {
                beanFieldGroup.discard();
            }
        });
    }

    private void closeWindow() {
        getUI().removeWindow((Window) mainLayout.getParent().getParent());
    }

    @Override
    public Action[] getActions(Object target, Object sender) {
        return actions;
    }

    @Override
    public void handleAction(Action action, Object sender, Object target) {
        if (action == esc) {
            closeWindow();
        }
    }

    @Override
    public void attach() {
        super.attach();
        getUI().addActionHandler(this);
    }

    @Override
    public void detach() {
        getUI().removeActionHandler(this);
        super.detach();
    }
}


