package com.jtbdevelopment.e_eye_o.ria.vaadin.components;

import com.google.common.eventbus.EventBus;
import com.jtbdevelopment.e_eye_o.DAO.ReadWriteDAO;
import com.jtbdevelopment.e_eye_o.entities.ClassList;
import com.jtbdevelopment.e_eye_o.entities.Student;
import com.jtbdevelopment.e_eye_o.ria.vaadin.events.IdObjectChanged;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.fieldgroup.BeanFieldGroup;
import com.vaadin.data.fieldgroup.FieldGroup;
import com.vaadin.data.util.BeanItemContainer;
import com.vaadin.data.validator.BeanValidator;
import com.vaadin.event.ShortcutAction;
import com.vaadin.ui.*;
import com.vaadin.ui.themes.Runo;
import org.jsoup.helper.StringUtil;

/**
 * Date: 3/10/13
 * Time: 6:45 PM
 */
public class StudentForm extends CustomComponent {

    private VerticalLayout mainLayout;

    private final BeanFieldGroup<Student> beanFieldGroup = new BeanFieldGroup<>(Student.class);

    private final ReadWriteDAO readWriteDAO;

    private final EventBus eventBus;

    private TextField firstName;

    private final Student student;

    /**
     * The constructor should first build the main layout, set the
     * composition root and then do any custom initialization.
     * <p/>
     * The constructor will not be automatically regenerated by the
     * visual editor.
     */
    public StudentForm(final ReadWriteDAO readWriteDAO, final EventBus eventBus, final Student student) {
        this.readWriteDAO = readWriteDAO;
        this.eventBus = eventBus;
        this.student = student;
        buildMainLayout();
        setCompositionRoot(mainLayout);
        beanFieldGroup.setItemDataSource(student);
    }

    @AutoGenerated
    private void buildMainLayout() {
        // the main layout and components will be created here
        mainLayout = new VerticalLayout();
        mainLayout.setMargin(true);
        mainLayout.setSpacing(true);
        mainLayout.setImmediate(true);

        HorizontalLayout dataRow = new HorizontalLayout();
        dataRow.setSpacing(true);
        dataRow.addComponent(new Label("First Name:"));

        firstName = new TextField();
        beanFieldGroup.bind(firstName, "firstName");
        firstName.addValidator(new BeanValidator(Student.class, "firstName"));
        firstName.setImmediate(true);
        dataRow.addComponent(firstName);

        dataRow.addComponent(new Label("Last Name:"));
        final TextField lastName = new TextField();
        beanFieldGroup.bind(lastName, "lastName");
        lastName.addValidator(new BeanValidator(Student.class, "lastName"));
        lastName.setImmediate(true);
        dataRow.addComponent(lastName);

        dataRow.addComponent(new Label("Classes:"));
        BeanItemContainer<ClassList> potentialClasses = new BeanItemContainer<>(ClassList.class);
        if (student.getArchivedClassLists().size() > 0) {
            potentialClasses.addAll(readWriteDAO.getEntitiesForUser(ClassList.class, student.getAppUser()));
        } else {
            potentialClasses.addAll(readWriteDAO.getActiveEntitiesForUser(ClassList.class, student.getAppUser()));
        }

        final TwinColSelect classes = new TwinColSelect();
        classes.setRows(3);
        classes.setWidth(40, Unit.EM);
        classes.setContainerDataSource(potentialClasses);
        classes.setItemCaptionPropertyId("description");
        beanFieldGroup.bind(classes, "classLists");
        dataRow.addComponent(classes);
        mainLayout.addComponent(dataRow);
        mainLayout.setComponentAlignment(dataRow, Alignment.MIDDLE_CENTER);

        HorizontalLayout buttons = new HorizontalLayout();
        Button save = new Button("Save");
        save.addStyleName(Runo.BUTTON_DEFAULT);
        save.setClickShortcut(ShortcutAction.KeyCode.ENTER);
        buttons.addComponent(save);
        save.addClickListener(new Button.ClickListener() {
            @Override
            public void buttonClick(final Button.ClickEvent event) {
                try {
                    beanFieldGroup.commit();
                    Student student = beanFieldGroup.getItemDataSource().getBean();
                    IdObjectChanged.ChangeType changeType;
                    if (StringUtil.isBlank(student.getId())) {
                        student = readWriteDAO.create(beanFieldGroup.getItemDataSource().getBean());
                        changeType = IdObjectChanged.ChangeType.ADDED;
                    } else {
                        student = readWriteDAO.update(beanFieldGroup.getItemDataSource().getBean());
                        changeType = IdObjectChanged.ChangeType.MODIFIED;
                    }
                    eventBus.post(new IdObjectChanged<>(changeType, student));
                    closeWindow();
                } catch (FieldGroup.CommitException e) {
                    throw new RuntimeException(e);
                }
            }
        });
        final Button cancel = new Button("Cancel");
        cancel.setClickShortcut(ShortcutAction.KeyCode.ESCAPE);
        cancel.addClickListener(new Button.ClickListener() {
            @Override
            public void buttonClick(final Button.ClickEvent event) {
                beanFieldGroup.discard();
                closeWindow();
            }
        });
        buttons.addComponent(cancel);

        final Button reset = new Button("Reset");
        reset.setClickShortcut(ShortcutAction.KeyCode.R, ShortcutAction.ModifierKey.ALT);
        reset.addClickListener(new Button.ClickListener() {
            @Override
            public void buttonClick(final Button.ClickEvent event) {
                beanFieldGroup.discard();
            }
        });
        buttons.addComponent(reset);

        mainLayout.addComponent(buttons);
        mainLayout.setComponentAlignment(buttons, Alignment.MIDDLE_CENTER);
    }

    private void closeWindow() {
        beanFieldGroup.discard();
        getUI().removeWindow(getEnclosingWindow());
    }

    private Window getEnclosingWindow() {
        return (Window) mainLayout.getParent().getParent();
    }

    @Override
    public void attach() {
        super.attach();
        getUI().setFocusedComponent(firstName);
        getEnclosingWindow().setCaption(student.getViewableDescription());
    }

}


