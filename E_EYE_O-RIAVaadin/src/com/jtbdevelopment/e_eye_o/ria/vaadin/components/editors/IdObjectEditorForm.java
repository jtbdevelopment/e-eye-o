package com.jtbdevelopment.e_eye_o.ria.vaadin.components.editors;

import com.google.common.eventbus.EventBus;
import com.jtbdevelopment.e_eye_o.DAO.ReadWriteDAO;
import com.jtbdevelopment.e_eye_o.entities.AppUserOwnedObject;
import com.jtbdevelopment.e_eye_o.ria.vaadin.events.IdObjectChanged;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.fieldgroup.BeanFieldGroup;
import com.vaadin.data.fieldgroup.FieldGroup;
import com.vaadin.data.validator.BeanValidator;
import com.vaadin.event.ShortcutAction;
import com.vaadin.ui.*;
import com.vaadin.ui.themes.Runo;
import org.jsoup.helper.StringUtil;

/**
 * Date: 3/17/13
 * Time: 6:31 PM
 */
public abstract class IdObjectEditorForm<T extends AppUserOwnedObject> extends CustomComponent {
    protected final BeanFieldGroup<T> beanFieldGroup;
    protected final ReadWriteDAO readWriteDAO;
    protected final EventBus eventBus;
    protected final VerticalLayout mainLayout = new VerticalLayout();
    protected final Class<T> entityType;
    protected final T entity;

    protected abstract Layout buildEditorLayout();

    protected abstract Focusable getInitialFocusComponent();

    public IdObjectEditorForm(final Class<T> entityType, final ReadWriteDAO readWriteDAO, final EventBus eventBus, final T entity) {
        this.eventBus = eventBus;
        this.readWriteDAO = readWriteDAO;
        this.beanFieldGroup = new BeanFieldGroup<>(entityType);
        this.entity = entity;
        this.entityType = entityType;
        buildMainLayout();
        setCompositionRoot(mainLayout);
        beanFieldGroup.setItemDataSource(entity);
    }

    @AutoGenerated
    protected void buildMainLayout() {
        // the main layout and components will be created here
        mainLayout.setMargin(true);
        mainLayout.setSpacing(true);
        mainLayout.setImmediate(true);

        Layout editorRow = buildEditorLayout();
        mainLayout.addComponent(editorRow);
        mainLayout.setComponentAlignment(editorRow, Alignment.MIDDLE_CENTER);

        Layout buttons = buildButtonLayout();
        mainLayout.addComponent(buttons);
        mainLayout.setComponentAlignment(buttons, Alignment.MIDDLE_CENTER);

        for (Field field : beanFieldGroup.getFields()) {
            field.addValidator(new BeanValidator(entityType, (String) beanFieldGroup.getPropertyId(field)));
            ((AbstractComponent) field).setImmediate(true);
        }
    }

    private Layout buildButtonLayout() {
        HorizontalLayout buttons = new HorizontalLayout();
        Button save = new Button("Save");
        save.addStyleName(Runo.BUTTON_DEFAULT);
        save.setClickShortcut(ShortcutAction.KeyCode.ENTER);
        buttons.addComponent(save);
        save.addClickListener(new Button.ClickListener() {
            @Override
            public void buttonClick(final Button.ClickEvent event) {
                try {
                    beanFieldGroup.commit();
                    T entity = beanFieldGroup.getItemDataSource().getBean();
                    IdObjectChanged.ChangeType changeType;
                    if (StringUtil.isBlank(entity.getId())) {
                        entity = readWriteDAO.create(beanFieldGroup.getItemDataSource().getBean());
                        changeType = IdObjectChanged.ChangeType.ADDED;
                    } else {
                        entity = readWriteDAO.update(beanFieldGroup.getItemDataSource().getBean());
                        changeType = IdObjectChanged.ChangeType.MODIFIED;
                    }
                    eventBus.post(new IdObjectChanged<>(changeType, entity));
                    closeWindow();
                } catch (FieldGroup.CommitException e) {
                    throw new RuntimeException(e);
                }
            }
        });
        final Button cancel = new Button("Cancel");
        cancel.setClickShortcut(ShortcutAction.KeyCode.ESCAPE);
        cancel.addClickListener(new Button.ClickListener() {
            @Override
            public void buttonClick(final Button.ClickEvent event) {
                beanFieldGroup.discard();
                closeWindow();
            }
        });
        buttons.addComponent(cancel);

        final Button reset = new Button("Reset");
        reset.setClickShortcut(ShortcutAction.KeyCode.R, ShortcutAction.ModifierKey.ALT);
        reset.addClickListener(new Button.ClickListener() {
            @Override
            public void buttonClick(final Button.ClickEvent event) {
                beanFieldGroup.discard();
            }
        });
        buttons.addComponent(reset);
        return buttons;
    }

    private void closeWindow() {
        beanFieldGroup.discard();
        getUI().removeWindow(getEnclosingWindow());
    }

    private Window getEnclosingWindow() {
        return (Window) mainLayout.getParent().getParent();
    }

    @Override
    public void attach() {
        super.attach();
        getUI().setFocusedComponent(getInitialFocusComponent());
        getEnclosingWindow().setCaption(entity.getViewableDescription());
    }
}
