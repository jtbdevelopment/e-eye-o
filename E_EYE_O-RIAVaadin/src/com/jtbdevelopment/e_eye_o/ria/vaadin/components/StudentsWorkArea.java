package com.jtbdevelopment.e_eye_o.ria.vaadin.components;

import com.google.common.eventbus.EventBus;
import com.google.common.eventbus.Subscribe;
import com.jtbdevelopment.e_eye_o.DAO.ReadWriteDAO;
import com.jtbdevelopment.e_eye_o.entities.AppUser;
import com.jtbdevelopment.e_eye_o.entities.IdObjectFactory;
import com.jtbdevelopment.e_eye_o.entities.Student;
import com.jtbdevelopment.e_eye_o.ria.vaadin.events.IdObjectChanged;
import com.jtbdevelopment.e_eye_o.ria.vaadin.utils.AllItemsBeanItemContainer;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property;
import com.vaadin.data.util.BeanItem;
import com.vaadin.data.util.converter.Converter;
import com.vaadin.event.FieldEvents;
import com.vaadin.event.ItemClickEvent;
import com.vaadin.ui.*;
import com.vaadin.ui.themes.Runo;
import org.joda.time.DateTime;
import org.jsoup.helper.StringUtil;
import org.vaadin.dialogs.ConfirmDialog;

import java.util.Arrays;
import java.util.Locale;

/**
 * Date: 3/10/13
 * Time: 4:40 PM
 */
public class StudentsWorkArea extends CustomComponent {
    private static final String ALL = "All";
    private static final String ACTIVE_ONLY = "Active Only";
    private static final String ARCHIVED_ONLY = "Archived Only";
    private static final String ACTIVATE = "Activate";
    private static final String ARCHIVE = "Archive";

    @AutoGenerated
    private VerticalLayout mainLayout;

    private final ReadWriteDAO readWriteDAO;

    private final IdObjectFactory idObjectFactory;

    private final AppUser appUser;

    private final EventBus eventBus;

    private final AllItemsBeanItemContainer<Student> students;

    private final Table table;

    private final TextField searchFor;

    // TODO make preference
    private int maxSize = 10;

    /**
     * The constructor should first build the main layout, set the
     * composition root and then do any custom initialization.
     * <p/>
     * The constructor will not be automatically regenerated by the
     * visual editor.
     */
    public StudentsWorkArea(final ReadWriteDAO readWriteDAO, final IdObjectFactory idObjectFactory, final EventBus eventBus, final AppUser appUser) {
        this.readWriteDAO = readWriteDAO;
        this.eventBus = eventBus;
        this.appUser = appUser;
        this.idObjectFactory = idObjectFactory;
        students = new AllItemsBeanItemContainer<>(Student.class, readWriteDAO.getEntitiesForUser(Student.class, appUser));
        searchFor = new TextField();
        table = new Table();
        buildMainLayout();
        setCompositionRoot(mainLayout);

    }

    @AutoGenerated
    private void buildMainLayout() {
        // the main layout and components will be created here
        mainLayout = new VerticalLayout();
        mainLayout.setImmediate(true);

        HorizontalLayout actionRow = new HorizontalLayout();
        HorizontalLayout buttonSection = new HorizontalLayout();
        Button newStudentButton = new Button("New Student");
        newStudentButton.addClickListener(new Button.ClickListener() {
            @Override
            public void buttonClick(Button.ClickEvent event) {
                popupStudentEditor(idObjectFactory.newStudent(appUser));
            }
        });
        buttonSection.addComponent(newStudentButton);
        buttonSection.setWidth(null);
        buttonSection.setSpacing(true);
        buttonSection.setComponentAlignment(newStudentButton, Alignment.BOTTOM_LEFT);
        actionRow.addComponent(buttonSection);
        actionRow.setComponentAlignment(buttonSection, Alignment.BOTTOM_LEFT);

        HorizontalLayout filterSection = new HorizontalLayout();
        filterSection.setWidth(null);
        filterSection.setSpacing(true);

        Label searchForLabel = new Label("Search For:");
        filterSection.addComponent(searchForLabel);
        filterSection.setComponentAlignment(searchForLabel, Alignment.BOTTOM_LEFT);
        searchFor.setWidth(12, Unit.EM);
        searchFor.setImmediate(true);
        searchFor.addTextChangeListener(new FieldEvents.TextChangeListener() {
            @Override
            public void textChange(final FieldEvents.TextChangeEvent event) {
                final String searchValue = event.getText();
                students.removeContainerFilters("viewableDescription");
                if (!StringUtil.isBlank(searchValue)) {
                    students.addContainerFilter("viewableDescription", searchValue, true, false);
                }
            }
        });
        filterSection.addComponent(searchFor);
        filterSection.setComponentAlignment(searchFor, Alignment.BOTTOM_LEFT);

        Label showWhichLabel = new Label("Show:");
        filterSection.addComponent(showWhichLabel);
        filterSection.setComponentAlignment(showWhichLabel, Alignment.BOTTOM_LEFT);
        final OptionGroup showWhich = new OptionGroup("", Arrays.asList(ALL, ACTIVE_ONLY, ARCHIVED_ONLY));
        showWhich.addStyleName("horizontal");
        showWhich.setImmediate(true);
        showWhich.addValueChangeListener(new Property.ValueChangeListener() {
            @Override
            public void valueChange(final Property.ValueChangeEvent event) {
                students.removeContainerFilters("archived");
                switch ((String) showWhich.getValue()) {
                    case ACTIVE_ONLY:
                        students.addContainerFilter("archived", "false", false, true);
                        break;
                    case ARCHIVED_ONLY:
                        students.addContainerFilter("archived", "true", false, false);
                        break;
                }
            }
        });
        //  TODO - make preference
        showWhich.setValue(ACTIVE_ONLY);
        filterSection.addComponent(showWhich);
        filterSection.setComponentAlignment(showWhich, Alignment.BOTTOM_LEFT);

        Label showSizeLabel = new Label("How Many?");
        filterSection.addComponent(showSizeLabel);
        filterSection.setComponentAlignment(showSizeLabel, Alignment.BOTTOM_LEFT);

        final ComboBox showSize = new ComboBox("", Arrays.asList(1, 5, 10, 25, 50));
        showSize.setImmediate(true);
        showSize.addValueChangeListener(new Property.ValueChangeListener() {
            @Override
            public void valueChange(final Property.ValueChangeEvent event) {
                if (table != null) {
                    maxSize = ((Integer) showSize.getValue());
                    table.setPageLength(getTableRows());
                }
            }
        });
        showSize.setValue(maxSize);
        showSize.setWidth(4, Unit.EM);
        filterSection.addComponent(showSize);
        filterSection.setComponentAlignment(showSize, Alignment.BOTTOM_LEFT);
        actionRow.addComponent(filterSection);
        actionRow.setComponentAlignment(filterSection, Alignment.BOTTOM_RIGHT);
        actionRow.setWidth(100, Unit.PERCENTAGE);

        mainLayout.addComponent(actionRow);

        table.setContainerDataSource(students);
        table.setSortEnabled(true);
        table.setSelectable(true);
        table.setPageLength(getTableRows());
        table.setSizeFull();
        table.setNullSelectionAllowed(false);
        table.addGeneratedColumn("actions", new Table.ColumnGenerator() {
            @Override
            public Object generateCell(final Table source, final Object itemId, final Object columnId) {
                GridLayout layout = new GridLayout(2, 1);
                final Student student = students.getItem(itemId).getBean();
                final Button archiveAction = new Button("ERROR");
                if (student.isArchived()) {
                    archiveAction.setCaption(ACTIVATE);
                } else {
                    archiveAction.setCaption(ARCHIVE);
                }
                archiveAction.addClickListener(new Button.ClickListener() {
                    @Override
                    public void buttonClick(final Button.ClickEvent event) {
                        final String caption = event.getButton().getCaption();
                        switch (caption) {
                            case ARCHIVE:
                                //  TODO - implement
                                Notification.show("TO DO:  Archive " + student.getViewableDescription());
                                break;
                            case ACTIVATE:
                                //  TODO - implement
                                Notification.show("TO DO:  Unarchive " + student.getViewableDescription());
                                break;
                            default:
                                Notification.show("Something went wrong - button label = " + caption, Notification.Type.ERROR_MESSAGE);
                        }
                    }
                });
                Button deleteButton = new Button("Delete");
                deleteButton.addClickListener(new Button.ClickListener() {
                    @Override
                    public void buttonClick(final Button.ClickEvent event) {
                        ConfirmDialog.show(getUI(), "Delete " + student.getViewableDescription(), new ConfirmDialog.Listener() {
                            @Override
                            public void onClose(final ConfirmDialog dialog) {
                                if (dialog.isConfirmed()) {
                                    //  TODO - make delete return set of everything deleted so all can be published
                                    readWriteDAO.delete(student);
                                    eventBus.post(new IdObjectChanged<>(IdObjectChanged.ChangeType.DELETED, student));
                                }
                            }
                        });
                    }
                });
                layout.addComponent(archiveAction, 0, 0);
                layout.addComponent(deleteButton, 1, 0);
                return layout;
            }
        });
        table.setVisibleColumns(new String[]{"firstName", "lastName", "modificationTimestamp", "archived", "actions"});
        table.setColumnHeaders(new String[]{"First Name", "Last Name", "Last Update", "Archived?", "Actions"});
        //  TODO - make preference
        table.setSortContainerPropertyId("firstName");
        table.setColumnAlignments(Table.Align.LEFT, Table.Align.LEFT, Table.Align.CENTER, Table.Align.CENTER, Table.Align.RIGHT);
        table.setConverter("archived", new Converter<String, Boolean>() {
            @Override
            public Boolean convertToModel(final String value, final Locale locale) throws ConversionException {
                return null;
            }

            @Override
            public String convertToPresentation(final Boolean value, final Locale locale) throws ConversionException {
                return value ? "Yes" : "No";
            }

            @Override
            public Class<Boolean> getModelType() {
                return Boolean.class;
            }

            @Override
            public Class<String> getPresentationType() {
                return String.class;
            }
        });
        table.setConverter("modificationTimestamp", new Converter<String, DateTime>() {
            @Override
            public DateTime convertToModel(final String value, final Locale locale) throws ConversionException {
                return null;
            }

            @Override
            public String convertToPresentation(final DateTime value, final Locale locale) throws ConversionException {
                return value.toString("MMM dd, YYYY HH:mm");
            }

            @Override
            public Class<DateTime> getModelType() {
                return DateTime.class;
            }

            @Override
            public Class<String> getPresentationType() {
                return String.class;
            }
        });

        mainLayout.addComponent(table);
        table.addItemClickListener(new ItemClickEvent.ItemClickListener() {
            @Override
            @SuppressWarnings("unchecked")
            public void itemClick(final ItemClickEvent event) {
                if (event.isDoubleClick()) {
                    Object item = event.getItem();
                    if (item instanceof BeanItem) {
                        Student student = ((BeanItem<Student>) item).getBean();
                        popupStudentEditor(student);
                    } else {
                        Notification.show("Not sure what this is - " + (item == null ? "null" : item.toString()));
                    }
                }
            }
        });

    }

    private int getTableRows() {
        return Math.min(maxSize, students.getUnfilteredSize());
    }

    private void popupStudentEditor(final Student student) {
        Window window = new Window("");
        window.setSizeUndefined();
        window.setModal(true);
        window.addStyleName(Runo.WINDOW_DIALOG);
        window.setWidth(80, Unit.EM);
        window.setHeight(15, Unit.EM);
        window.setContent(new StudentForm(readWriteDAO, eventBus, student));
        getUI().addWindow(window);
    }

    @Subscribe
    @SuppressWarnings("unused")
    public void handleIdObjectChange(final IdObjectChanged msg) {
        if (Student.class.isAssignableFrom(msg.getEntityType())) {
            Student student = (Student) msg.getEntity();
            final Student idForBean = students.getBeanIdResolver().getIdForBean(student);
            if (idForBean != null) {
                students.removeItem(idForBean);
            }
            if (!IdObjectChanged.ChangeType.DELETED.equals(msg.getChangeType())) {
                students.addBean(student);
            }
            table.sort();
            table.setPageLength(getTableRows());
        }
    }

    @Override
    public void attach() {
        super.attach();
        eventBus.register(this);
        getUI().setFocusedComponent(searchFor);
    }

    @Override
    public void detach() {
        eventBus.unregister(this);
        super.detach();
    }
}
