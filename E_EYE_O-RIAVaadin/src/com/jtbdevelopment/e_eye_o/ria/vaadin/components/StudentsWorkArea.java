package com.jtbdevelopment.e_eye_o.ria.vaadin.components;

import com.google.common.eventbus.EventBus;
import com.jtbdevelopment.e_eye_o.DAO.ReadWriteDAO;
import com.jtbdevelopment.e_eye_o.entities.AppUser;
import com.jtbdevelopment.e_eye_o.entities.IdObjectFactory;
import com.jtbdevelopment.e_eye_o.entities.Observation;
import com.jtbdevelopment.e_eye_o.entities.Student;
import com.jtbdevelopment.e_eye_o.ria.vaadin.components.filterabletables.ObservationTable;
import com.jtbdevelopment.e_eye_o.ria.vaadin.components.filterabletables.StudentTable;
import com.jtbdevelopment.e_eye_o.ria.vaadin.utils.AllItemsBeanItemContainer;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.VerticalLayout;

/**
 * Date: 3/10/13
 * Time: 4:40 PM
 */
public class StudentsWorkArea extends CustomComponent {
    private StudentTable studentTable;
    private ObservationTable observationTable;

    /**
     * The constructor should first build the main layout, set the
     * composition root and then do any custom initialization.
     * <p/>
     * The constructor will not be automatically regenerated by the
     * visual editor.
     */
    public StudentsWorkArea(final ReadWriteDAO readWriteDAO, final IdObjectFactory idObjectFactory, final EventBus eventBus, final AppUser appUser) {
        final AllItemsBeanItemContainer<Student> students = new AllItemsBeanItemContainer<>(Student.class, readWriteDAO.getEntitiesForUser(Student.class, appUser));
        final AllItemsBeanItemContainer<Observation> observationsForStudent = new AllItemsBeanItemContainer<>(Observation.class);
        final VerticalLayout mainLayout = new VerticalLayout();
        mainLayout.setImmediate(true);

        studentTable = new StudentTable(readWriteDAO, idObjectFactory, eventBus, appUser, students) {
            @Override
            protected void handleClickEvent(final Student entity) {
                observationsForStudent.removeAllItems();
                observationsForStudent.addAll(readWriteDAO.getAllObservationsForEntity(entity));
                observationTable.setDefaultObservationSubject(entity);
                observationTable.refreshSizeAndSort();
            }
        };
        mainLayout.addComponent(studentTable);

        observationTable = new ObservationTable(readWriteDAO, idObjectFactory, eventBus, appUser, observationsForStudent) {
            @Override
            protected void handleClickEvent(final Observation entity) {
                //  TODO
            }
        };
        mainLayout.addComponent(observationTable);
        setCompositionRoot(mainLayout);
    }

    @Override
    public void attach() {
        super.attach();
        getUI().setFocusedComponent(studentTable.getSearchFor());
    }

    @Override
    public void detach() {
        super.detach();
    }
}
