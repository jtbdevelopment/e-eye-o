package com.jtbdevelopment.e_eye_o.ria.vaadin.widgets;

import com.google.common.eventbus.EventBus;
import com.jtbdevelopment.e_eye_o.DAO.ReadOnlyDAO;
import com.jtbdevelopment.e_eye_o.entities.AppUser;
import com.jtbdevelopment.e_eye_o.entities.AppUserOwnedObject;
import com.jtbdevelopment.e_eye_o.ria.vaadin.events.TreeSelectionChanged;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Item;
import com.vaadin.data.Property;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Tree;
import com.vaadin.ui.VerticalLayout;

import java.util.Collection;
import java.util.LinkedList;
import java.util.Set;

/**
 * Date: 3/7/13
 * Time: 10:34 PM
 */
public class IdObjectTreeView extends CustomComponent {

    @AutoGenerated
    private VerticalLayout mainLayout;
    private final Tree tree;

    private final AppUser appUser;
    private final ReadOnlyDAO readOnlyDAO;

    private final EventBus eventBus;

    /**
     * The constructor should first build the main layout, set the
     * composition root and then do any custom initialization.
     * <p/>
     * The constructor will not be automatically regenerated by the
     * visual editor.
     */
    public IdObjectTreeView(final AppUser appUser, final ReadOnlyDAO readOnlyDao, final EventBus eventBus, final String topMenu, final boolean activeFlag) {
        this.readOnlyDAO = readOnlyDao;
        this.appUser = appUser;
        this.eventBus = eventBus;
        tree = new Tree(topMenu);
        buildMainLayout(activeFlag);
        setCompositionRoot(mainLayout);


        // TODO add user code here
    }

    @AutoGenerated
    private void buildMainLayout(final boolean activeFlag) {
        // the main layout and components will be created here
        mainLayout = new VerticalLayout();
        new IdObjectTreeContainer(tree, activeFlag);
        tree.addExpandListener(new Tree.ExpandListener() {
            @Override
            public void nodeExpand(final Tree.ExpandEvent event) {
                final IdObjectTreeContainer containerDataSource = getIdObjectTreeContainerFromEvent(event);
                final Class<? extends AppUserOwnedObject> entityType = getEntityTypeFromEvent(event, containerDataSource);

                clearExistingChildren(event, containerDataSource);

                Set<? extends AppUserOwnedObject> idObjects = readOnlyDAO.getEntitiesForUser(
                        entityType,
                        appUser,
                        containerDataSource.getArchived());
                for (AppUserOwnedObject ownedObject : idObjects) {
                    Object subId = containerDataSource.addItem();
                    Item subItem = containerDataSource.getItem(subId);
                    subItem.getItemProperty(IdObjectTreeContainer.ENTITY_DESCRIPTION).setValue(ownedObject.getViewableDescription());
                    subItem.getItemProperty(IdObjectTreeContainer.ENTITY_CLASS).setValue(ownedObject.getClass());
                    subItem.getItemProperty(IdObjectTreeContainer.ENTITY_ID).setValue(ownedObject.getId());
                    containerDataSource.setParent(subId, event.getItemId());
                    containerDataSource.setChildrenAllowed(subId, false);
                }
            }

            private void clearExistingChildren(final Tree.ExpandEvent event, final IdObjectTreeContainer containerDataSource) {
                final Collection<?> children = containerDataSource.getChildren(event.getItemId());
                if (children != null) {    //  Really Vaadin?  C'mon
                    final Collection<Object> localChildren = new LinkedList<>();
                    localChildren.addAll(children);
                    for (final Object child : localChildren) {
                        containerDataSource.removeItem(child);
                    }
                }
            }
        });

        tree.addValueChangeListener(new Property.ValueChangeListener() {
            @Override
            public void valueChange(final Property.ValueChangeEvent event) {
                Object itemId = tree.getValue();
                if (itemId == null) {
                    return;
                }
                Item item = tree.getItem(itemId);
                TreeSelectionChanged publishEvent = new TreeSelectionChanged();
                publishEvent.setEntityId((String) item.getItemProperty(IdObjectTreeContainer.ENTITY_ID).getValue());
                publishEvent.setEntityType((Class<? extends AppUserOwnedObject>) item.getItemProperty(IdObjectTreeContainer.ENTITY_CLASS).getValue());
                eventBus.post(publishEvent);
            }
        });
        mainLayout.addComponent(tree);
    }

    private Class<? extends AppUserOwnedObject> getEntityTypeFromEvent(final Tree.ExpandEvent event, final IdObjectTreeContainer containerDataSource) {
        return (Class<? extends AppUserOwnedObject>) (containerDataSource.getContainerProperty(event.getItemId(), IdObjectTreeContainer.ENTITY_CLASS)).getValue();
    }

    private IdObjectTreeContainer getIdObjectTreeContainerFromEvent(final Tree.ExpandEvent event) {
        return (IdObjectTreeContainer) ((Tree) event.getSource()).getContainerDataSource();
    }

}
